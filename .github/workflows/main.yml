on:
  push:
    paths:
      - '**/*'
  pull_request:
    paths:
      - '**/*'

jobs:
  Build-Databricks-Apps:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install Databricks CLI
      run: pip install databricks-cli

    - name: Get Databricks Access Token using Service Principal
      run: |
        export CLIENT_ID=${{ secrets.DATABRICKS_CLIENT_ID_CICD }}
        export CLIENT_SECRET=${{ secrets.DATABRICKS_CLIENT_SECRET_CICD }}
        export TOKEN_ENDPOINT_URL="${{ secrets.DATABRICKS_HOST }}/oidc/v1/token"
        
        DATABRICKS_TOKEN=$(curl --request POST \
          --url "$TOKEN_ENDPOINT_URL" \
          --user "$CLIENT_ID:$CLIENT_SECRET" \
          --data 'grant_type=client_credentials&scope=all-apis' | jq -r .access_token)
        
        echo "DATABRICKS_TOKEN=$DATABRICKS_TOKEN" >> $GITHUB_ENV

    - name: Create Databricks Directory for apps
      run: |
        RESPONSE=$(curl --request POST \
          --url "${{ secrets.DATABRICKS_HOST }}/api/2.0/workspace/mkdirs" \
          --header "Authorization: Bearer $DATABRICKS_TOKEN" \
          --header "Content-Type: application/json" \
          --data '{"path": "/apps"}')

        echo "response=$RESPONSE" >> $GITHUB_ENV
        echo "$RESPONSE"

    - name: Setup python
      uses: actions/setup-python@v2
    - name: Build wheel
      run:
        python setup.py bdist_wheel

    - name: upload-dbfs-temp
      uses: databricks/upload-dbfs-temp@v0
      with:
        local-path: ./apps/
        databricks-host: ${{ secrets.DATABRICKS_HOST }}
        databricks-token: $DATABRICKS_TOKEN  

  

    - name: Check and Create Databricks app if not exists
      run: |
        RESPONSE=$(curl --request GET \
          --url "${{ secrets.DATABRICKS_HOST }}/api/2.0/apps/cicdappdemo" \
          --header "Authorization: Bearer $DATABRICKS_TOKEN" \
          --header "Content-Type: application/json")
        
        echo "response=$RESPONSE" >> $GITHUB_ENV
        echo "$RESPONSE"
        
        if echo "$RESPONSE" | grep -q '"error_code":"RESOURCE_DOES_NOT_EXIST"'; then
          RESPONSE=$(curl --request POST \
            --url "${{ secrets.DATABRICKS_HOST }}/api/2.0/apps" \
            --header "Authorization: Bearer $DATABRICKS_TOKEN" \
            --header "Content-Type: application/json" \
            --data '{"name": "cicdappdemo"}')
          
          echo "response=$RESPONSE" >> $GITHUB_ENV
          echo "$RESPONSE"
        else
          echo "App already exists. Skipping creation."
        fi


    